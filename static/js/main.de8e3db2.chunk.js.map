{"version":3,"sources":["dishesFields.js","fetchData.js","dishesSubmit.js","DishesForm.js","App.js","reducer.js","index.js"],"names":["dishesFieldsBase","dishesFieldsType","dishesFields","type","items","fields","Object","keys","reduce","its","i","includes","init","headers","fetchData","values","method","dishes","url","body","JSON","stringify","dishesSubmit","fetch_data","Promise","resolve","reject","fetch","then","response","promise","json","ok","value","alert","map","SubmissionError","renderFromHelper","touched","error","FormHelperText","renderTextField","label","input","meta","invalid","custom","TextField","placeholder","helperText","onChange","e","Number","target","renderTimeField","mask","formatChars","disabled","maskChar","renderSelectField","children","FormControl","InputLabel","Select","native","renderSliderField","InputProps","Typography","gutterBottom","Slider","valueLabelDisplay","val","DishesForm","props","handleSubmit","submitting","useState","dishType","setDishType","onSubmit","submit","Field","name","component","id","event","Divider","light","inputProps","min","step","max","Button","variant","color","reduxForm","form","initialValues","spiciness_scale","validate","errors","forEach","field","App","className","this","React","Component","rootReducer","combineReducers","formReducer","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.de8e3db2.chunk.js","sourcesContent":["const dishesFieldsBase = [\r\n  'name',\r\n  'preparation_time',\r\n  'type'\r\n];\r\n\r\nconst dishesFieldsType = {\r\n  '': [],\r\n  'pizza': [\r\n    'no_of_slices',\r\n    'diameter',\r\n  ],\r\n  'soup': [\r\n    'spiciness_scale',\r\n  ],\r\n  'sandwich': [\r\n    'slices_of_bread',\r\n  ],\r\n}\r\n\r\nfunction dishesFields(type, items = null){\r\n  let fields = dishesFieldsBase;\r\n  if (!!type) fields = [...fields, ...dishesFieldsType[type]]\r\n  if(!!items) return Object.keys(items).reduce((its, i) => {\r\n      if(fields.includes(i)) its[i] = items[i];\r\n      return its;\r\n    },{});\r\n  else return fields;\r\n}\r\nexport default dishesFields;","const url = \"https://frosty-wood-6558.getsandbox.com:443/dishes\";\r\nconst init = {\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    },\r\n};\r\n\r\nconst fetchData = (values, method) => {\r\n    return {dishes: {\r\n        url: url, \r\n        init: {\r\n            ...init, \r\n            method: method, \r\n            body: JSON.stringify(values)}\r\n    }};\r\n}\r\nexport default fetchData;","import { SubmissionError } from 'redux-form'\r\nimport './App.css';\r\nimport fetchData from './fetchData';\r\nimport dishesFields from './dishesFields';\r\n\r\nconst dishesSubmit = values => {\r\n  const fetch_data = fetchData(dishesFields(values.type, values), 'POST').dishes;\r\n  return new Promise((resolve, reject) => {\r\n      fetch(fetch_data.url, fetch_data.init)\r\n      .then(response => {\r\n        let promise = Promise.resolve(response.json());\r\n        if(response.ok){\r\n          promise.then(function(value){\r\n              alert(\"Dish submitted successfully. Response:\\n\"+Object.keys(value).map(i => (\"\\n\"+i+\": \"+value[i])));\r\n              resolve();\r\n          })\r\n        }else{\r\n          promise.then(function(value){\r\n              reject(new SubmissionError(value));\r\n          })\r\n        }\r\n      });\r\n  })\r\n}\r\nexport default dishesSubmit;","import React, { useState } from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputMask from 'react-input-mask';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport dishesFields from './dishesFields';\r\nimport submit from './dishesSubmit';\r\n\r\n\r\n// Validation of inputs\r\nconst validate = values => {\r\n  const errors = {};\r\n  dishesFields(values.type).forEach(field => {\r\n    if (!values[field]) {\r\n      errors[field] = 'Required'\r\n    }\r\n  });\r\n  return errors;\r\n};\r\n\r\nconst renderFromHelper = ({ touched, error }) => {\r\n  if (!(touched && !!error)) {\r\n    return\r\n  } else {\r\n    return <FormHelperText>{touched && error}</FormHelperText>\r\n  }\r\n}\r\n\r\n//Text field\r\nconst renderTextField = ({\r\n  label,\r\n  input,\r\n  type,\r\n  meta: { touched, invalid, error },\r\n  ...custom\r\n}) => (\r\n  <TextField\r\n    label={label}\r\n    placeholder={label}\r\n    type={type}\r\n    error={touched && invalid}\r\n    helperText={touched && error}\r\n    value={input.value}\r\n    onChange={(e) => type===\"number\" ? input.onChange(Number(e.target.value)) : input.onChange(e.target.value)}\r\n    {...custom}\r\n  />\r\n);\r\n\r\n//Time field\r\nconst renderTimeField = ({\r\n  label,\r\n  input,\r\n  mask,\r\n  formatChars,\r\n  meta: { touched, invalid, error },\r\n  ...custom\r\n}) => (\r\n  <InputMask\r\n    mask={mask}\r\n    disabled={false}\r\n    maskChar=\"0\"\r\n    formatChars= {{\r\n      ...formatChars,\r\n      '9': '[0-9]',\r\n      'a': '[A-Za-z]',\r\n      '*': '[A-Za-z0-9]'}}\r\n      {...input}\r\n      {...custom}\r\n  >\r\n    {() => <TextField \r\n      label={label}\r\n      placeholder={label}\r\n      error={touched && invalid}\r\n      helperText={touched && error}\r\n    />}\r\n  </InputMask>\r\n);\r\n\r\n// Select field\r\nconst renderSelectField = ({\r\n  input,\r\n  label,\r\n  onChange,\r\n  meta: { touched, error },\r\n  children,\r\n  ...custom\r\n}) => (\r\n  <FormControl error={touched && !!error}>\r\n    <InputLabel>{label}</InputLabel>\r\n    <Select\r\n      native\r\n      onChange={onChange}\r\n      {...input}\r\n      {...custom}\r\n    >\r\n      {children}\r\n    </Select>\r\n    {renderFromHelper({ touched, error })}\r\n  </FormControl>\r\n)\r\n\r\n// Slider field\r\nconst renderSliderField = ({\r\n  input,\r\n  label,\r\n  InputProps,\r\n  ...custom\r\n}) => (\r\n  <div>\r\n    <Typography gutterBottom>\r\n      {label}\r\n    </Typography>\r\n    <Slider\r\n      valueLabelDisplay=\"auto\"\r\n      value={input.value}\r\n      onChange={(e, val) => input.onChange(val)}\r\n      {...InputProps}\r\n      {...custom}\r\n    />\r\n  </div>\r\n)\r\n\r\n\r\n\r\n//Dishes form component\r\nlet DishesForm = props => {\r\n  const { handleSubmit, submitting } = props;\r\n  const [dishType, setDishType] = useState('');\r\n\r\n  function handleChangeDishType(event){\r\n    setDishType(event.target.value);\r\n  }\r\n\r\n  return (\r\n  <form onSubmit={handleSubmit(submit)}>\r\n    <div>\r\n      <Field\r\n          name=\"name\"\r\n          component={renderTextField}\r\n          label=\"Dish name\"\r\n      />\r\n    </div>\r\n    <div>\r\n      <Field\r\n          name=\"preparation_time\"\r\n          component={renderTimeField}\r\n          label=\"Preparation time\"\r\n          mask=\"99:59:59\"\r\n          formatChars={{'5': '[0-5]'}}\r\n      />\r\n    </div>\r\n    <div>\r\n        <Field\r\n          name=\"type\"\r\n          component={renderSelectField}\r\n          label=\"Dish type\"\r\n          id=\"dishTypeField\"\r\n          onChange={handleChangeDishType}\r\n        >\r\n          <option />\r\n          <option value={'pizza'}>Pizza</option>\r\n          <option value={'soup'}>Soup</option>\r\n          <option value={'sandwich'}>Sandwich</option>\r\n        </Field>\r\n    </div>\r\n    <Divider light/>\r\n    {\r\n      (() => {\r\n          if (dishType==='pizza')\r\n             return <>\r\n              <div>\r\n                <Field\r\n                    name=\"no_of_slices\"\r\n                    component={renderTextField}\r\n                    label=\"Number of slices\"\r\n                    type=\"number\"\r\n                    InputProps={{ inputProps: { min: 0 } }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Field\r\n                    name=\"diameter\"\r\n                    component={renderTextField}\r\n                    label=\"Diameter\"\r\n                    type=\"number\"\r\n                    InputProps={{ inputProps: { min: 0, step: 0.01 } }}\r\n                />\r\n              </div>\r\n            </>;\r\n          if (dishType==='soup')\r\n            return <>\r\n              <div>\r\n                <Field\r\n                    name=\"spiciness_scale\"\r\n                    component={renderSliderField}\r\n                    label=\"Spiciness scale\"\r\n                    InputProps={{min: 1, max: 10, step: 1}}\r\n                />\r\n              </div>\r\n            </>;\r\n          if (dishType==='sandwich')\r\n          return <>\r\n          <div>\r\n            <Field\r\n                name=\"slices_of_bread\"\r\n                component={renderTextField}\r\n                label=\"Number of slices\"\r\n                type=\"number\"\r\n                InputProps={{ inputProps: { min: 0 } }}\r\n            />\r\n          </div>\r\n        </>;\r\n      })()\r\n    }\r\n    <Button\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      type=\"submit\"\r\n      disabled={submitting}\r\n    >\r\n      Submit\r\n    </Button>\r\n  </form>\r\n  );\r\n}\r\n\r\nDishesForm = reduxForm({\r\n  form: 'dishes',\r\n  initialValues: {\r\n    spiciness_scale: 1,\r\n  },\r\n  validate,\r\n})(DishesForm);\r\n\r\nexport default DishesForm;","import React from 'react';\r\nimport './App.css';\r\nimport DishesForm from './DishesForm';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <DishesForm onSubmit={this.submit}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { createStore, combineReducers } from 'redux'\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nconst rootReducer = combineReducers({\r\n  form: formReducer\r\n});\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux'\r\nimport store from './reducer'\r\n//import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  ,document.getElementById('root')\r\n);\r\n\r\n//reportWebVitals();\r\n"],"sourceRoot":""}